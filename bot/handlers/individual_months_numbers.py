from bot.loader import dp, bot
from aiogram import types
from bot.info.individual_months_numbers import get_individual_months_numbers_button, message_text, info
from bot.info.main_numbs_menu import back_to_main_menu_button
from bot.info.forecast_numbers import back_to_base_forecast_button
from bot.utils import check_seals_amount
from bot.prices import individual_months_number_price
import os
from bot.states import Numbers
from aiogram.dispatcher import FSMContext
import bot.django_crud as dj


@dp.callback_query_handler(lambda call: call.data == 'individual_months_numbers_button')
async def open_ndividual_months_number(call: types.CallbackQuery):
    await call.message.delete()
    keyboard = types.InlineKeyboardMarkup().add(get_individual_months_numbers_button).add(back_to_base_forecast_button)
    await call.message.answer(message_text, reply_markup=keyboard, parse_mode='HTML')
    
@dp.callback_query_handler(lambda call: call.data == 'get_individual_months_numbers_button')
async def get_ndividual_months_number(call: types.CallbackQuery):
    await call.message.delete()
    is_seals_enough = await check_seals_amount(call.message, call.from_user.id, individual_months_number_price)
    if not is_seals_enough:
        return
    
    await dj.minus_seals(call.from_user.id,individual_months_number_price)
    await call.message.answer('üëÅüëÅüëÅ–ü–µ—á–∞—Ç–∏ —Å–æ—Ä–≤–∞–Ω—ãüëÅüëÅüëÅ')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –í–∞—à–µ–≥–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –æ—Ç 1 –¥–æ 9. –ù–∞–ø—Ä–∏–º–µ—Ä: 7.')
    await Numbers.individual_month_year.set()
    
@dp.message_handler(state=Numbers.individual_month_year)
async def get_frist_number(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')
        return
    elif int(msg.text) > 9 or int(msg.text) == 0:
        await msg.answer('–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 9.')
        return
    await state.update_data(individual_month_year = int(msg.text))
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—è—Ü–∞, –æ –∫–æ—Ç–æ—Ä–æ–º –∂–µ–ª–∞–µ—Ç–µ —É–∑–Ω–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10.')
    await Numbers.individual_month_month.set()

    
@dp.message_handler(state=Numbers.individual_month_month)
async def get_second_number(msg: types.Message, state: FSMContext):
    if not msg.text.isdigit():
        await msg.answer('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ')
        return
    elif int(msg.text) > 12 or int(msg.text) == 0:
        await msg.answer('–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 12.')
        return
    state_data = await state.get_data()
    year = state_data.get('individual_month_year')
    month = int(msg.text)
    calc_month = month
    if calc_month != 11:
        while calc_month not in range(0,10):
            number_sum = 0
            for numb in str(calc_month):
                number_sum += int(numb)
            calc_month = number_sum
            
    individual_month = calc_month + year
    while individual_month not in range(0,10):
        number_sum = 0
        for numb in str(individual_month):
            number_sum += int(numb)
        individual_month = number_sum

    individual_month_number = str(individual_month)
    
    img = info[individual_month_number]['img']
    value = info[individual_month_number]['value']
    
    current_dir = os.getcwd()
    file_path = os.path.join(current_dir, 'bot', 'imgs', 'individual_months_numbers', img)
    with open(file_path, 'rb') as photo:
        file = types.InputFile(photo)
        await msg.answer_photo(photo=file, caption=value)
        keyboard = types.InlineKeyboardMarkup().add(back_to_base_forecast_button)
        await msg.answer('1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£\n–ö –¥—Ä—É–≥–∏–º —á–∏—Å–ª–∞–º!', reply_markup=keyboard)
    await state.finish()